#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import math
import cmath
import numpy as np

PHITABLE6 = [[-3 ,-1 ,3 ,3 ,-1 ,-3],
            [-3 ,3 ,-1 ,-1 ,3 ,-3],
            [-3 ,-3 ,-3 ,3 ,1 ,-3],
            [1 ,1 ,1 ,3 ,-1 ,-3],
            [1 ,1 ,1 ,-3 ,-1 ,3],
            [-3 ,1 ,-1 ,-3 ,-3 ,-3],
            [-3 ,1 ,3 ,-3 ,-3 ,-3],
            [-3 ,-1 ,1 ,-3 ,1 ,-1],
            [-3 ,-1 ,-3 ,1 ,-3 ,-3],
            [-3 ,-3 ,1 ,-3 ,3 ,-3],
            [-3 ,1 ,3 ,1 ,-3 ,-3],
            [-3 ,-1 ,-3 ,1 ,1 ,-3],
            [1 ,1 ,3 ,-1 ,-3 ,3],
            [1 ,1 ,3 ,3 ,-1 ,3],
            [1 ,1 ,1 ,-3 ,3 ,-1],
            [1 ,1 ,1 ,-1 ,3 ,-3],
            [-3 ,-1 ,-1 ,-1 ,3 ,-1],
            [-3 ,-3 ,-1 ,1 ,-1 ,-3],
            [-3 ,-3 ,-3 ,1 ,-3 ,-1],
            [-3 ,1 ,1 ,-3 ,-1 ,-3],
            [-3 ,3 ,-3 ,1 ,1 ,-3],
            [-3 ,1 ,-3 ,-3 ,-3 ,-1],
            [1 ,1 ,-3 ,3 ,1 ,3],
            [1 ,1 ,-3 ,-3 ,1 ,-3],
            [1 ,1 ,3 ,-1 ,3 ,3],
            [1 ,1 ,-3 ,1 ,3 ,3],
            [1 ,1 ,-1 ,-1 ,3 ,-1],
            [1 ,1 ,-1 ,3 ,-1 ,-1],
            [1 ,1 ,-1 ,3 ,-3 ,-1],
            [1 ,1 ,-3 ,1 ,-1 ,-1]]

PHITABLE12 = [[-3 ,1 ,-3 ,-3 ,-3 , 3 ,-3 ,-1 , 1 , 1 , 1 ,-3],
            [-3 , 3 , 1 ,-3 , 1 , 3 ,-1 ,-1 , 1 , 3 , 3 , 3],
            [-3 , 3 , 3 , 1 ,-3 , 3 ,-1 , 1 , 3 ,-3 , 3 ,-3],
            [-3 ,-3 ,-1 ,3 ,3 ,3 ,-3 ,3 ,-3 ,1 ,-1 ,-3],
            [-3 ,-1 ,-1 ,1 ,3 ,1 ,1 ,-1 ,1 ,-1 ,-3 ,1],
            [-3 ,-3 ,3 ,1 ,-3 ,-3 ,-3 ,-1 ,3 ,-1 ,1 ,3],
            [ 1 ,-1 ,3 ,-1 ,-1 ,-1 ,-3 ,-1 ,1 ,1 ,1 ,-3],
            [-1 ,-3 ,3 ,-1 ,-3 ,-3 ,-3 ,-1 ,1 ,-1 ,1 ,-3],
            [-3 ,-1 ,3 ,1 ,-3 ,-1 ,-3 ,3 ,1 ,3 ,3 ,1],
            [-3 ,-1 ,-1 ,-3 ,-3 ,-1 ,-3 ,3 ,1 ,3 ,-1 ,-3],
            [-3 ,3 ,-3 ,3 ,3 ,-3 ,-1 ,-1 ,3 ,3 ,1 ,-3],
            [-3 ,-1 ,-3 ,-1 ,-1 ,-3 ,3 ,3 ,-1 ,-1 ,1 ,-3],
            [-3 ,-1 ,3 ,-3 ,-3 ,-1 ,-3 ,1 ,-1 ,-3 ,3 ,3],
            [-3 ,1 ,-1 ,-1 ,3 ,3 ,-3 ,-1 ,-1 ,-3 ,-1 ,-3],
            [ 1 ,3 ,-3 ,1 ,3 ,3 ,3 ,1 ,-1 ,1 ,-1 ,3],
            [-3 ,1 ,3 ,-1 ,-1 ,-3 ,-3 ,-1 ,-1 ,3 ,1 ,-3],
            [-1 ,-1 ,-1 ,-1 ,1 ,-3 ,-1 ,3 ,3 ,-1 ,-3 ,1],
            [-1 ,1 ,1 ,-1 ,1 ,3 ,3 ,-1 ,-1 ,-3 ,1 ,-3],
            [-3 ,1 ,3 ,3 ,-1 ,-1 ,-3 ,3 ,3 ,-3 ,3 ,-3],
            [-3 ,-3 ,3 ,-3 ,-1 ,3 ,3 ,3 ,-1 ,-3 ,1 ,-3],
            [ 3 ,1 ,3 ,1 ,3 ,-3 ,-1 ,1 ,3 ,1 ,-1 ,-3],
            [-3 ,3 ,1 ,3 ,-3 ,1 ,1 ,1 ,1 ,3 ,-3 ,3],
            [-3 ,3 ,3 ,3 ,-1 ,-3 ,-3 ,-1 ,-3 ,1 ,3 ,-3],
            [ 3 ,-1 ,-3 ,3 ,-3 ,-1 ,3 ,3 ,3 ,-3 ,-1 ,-3],
            [-3 ,-1 ,1 ,-3 ,1 ,3 ,3 ,3 ,-1 ,-3 ,3 ,3],
            [-3 ,3 ,1 ,-1 ,3 ,3 ,-3 ,1 ,-1 ,1 ,-1 ,1],
            [-1 ,1 ,3 ,-3 ,1 ,-1 ,1 ,-1 ,-1 ,-3 ,1 ,-1],
            [-3 ,-3 ,3 ,3 ,3 ,-3 ,-1 ,1 ,-3 ,3 ,1 ,-3],
            [ 1 ,-1 ,3 ,1 ,1 ,-1 ,-1 ,-1 ,1 ,3 ,-3 ,1],
            [-3 ,3 ,-3 ,3 ,-3 ,-3 ,3 ,-1 ,-1 ,1 ,3 ,-3]]

PHITABLE18 = [ [3, -3, 3, -1, 1, 3, -3, -1, -3, -3, -1, -3, 3, 1, -1, 3, -3, 3],
               [-3, 3, 1, -1, -1, 3, -3, -1, 1, 1, 1, 1, 1, -1, 3, -1, -3, -1],
               [-3, -3, 3, 3, 3, 1, -3, 1, 3, 3, 1, -3, -3, 3, -1, -3, -1, 1], 
               [1, 1, -1, -1, -3, -1, 1, -3, -3, -3, 1, -3, -1, -1, 1, -1, 3, 1],
               [3, -3, 1, 1, 3, -1, 1, -1, -1, -3, 1, 1, -1, 3, 3, -3, 3, -1],
               [-3, 3, -1, 1, 3, 1, -3, -1, 1, 1, -3, 1, 3, 3, -1, -3, -3, -3],
               [1, 1, -3, 3, 3, 1, 3, -3, 3, -1, 1, 1, -1, 1, -3, -3, -1, 3],
               [-3, 1, -3, -3, 1, -3, -3, 3, 1, -3, -1, -3, -3, -3, -1, 1, 1, 3],
               [3, -1, 3, 1, -3, -3, -1, 1, -3, -3, 3, 3, 3, 1, 3, -3, 3, -3],
               [-3, -3, -3, 1, -3, 3, 1, 1, 3, -3, -3, 1, 3, -1, 3, -3, -3, 3],
               [-3, -3, 3, 3, 3, -1, -1, -3, -1, -1, -1, 3, 1, -3, -3, -1, 3, -1],
               [-3, -1, -3, -3, 1, 1, -1, -3, -1, -3, -1, -1, 3, 3, -1, 3, 1, 3],
               [1, 1, -3, -3, -3, -3, 1, 3, -3, 3, 3, 1, -3, -1, 3, -1, -3, 1],
               [-3, 3, -1, -3, -1, -3, 1, 1, -3, -3, -1, -1, 3, -3, 1, 3, 1, 1],
               [3, 1, -3, 1, -3, 3, 3, -1, -3, -3, -1, -3, -3, 3, -3, -1, 1, 3],
               [-3, -1, -3, -1, -3, 1, 3, -3, -1, 3, 3, 3, 1, -1, -3, 3, -1, -3],
               [-3, -1, 3, 3, -1, 3, -1, -3, -1, 1, -1, -3, -1, -1, -1, 3, 3, 1],
               [-3, 1, -3, -1, -1, 3, 1, -3, -3, -3, -1, -3, -3, 1, 1, 1, -1, -1],
               [3, 3, 3, -3, -1, -3, -1, 3, -1, 1, -1, -3, 1, -3, -3, -1, 3, 3],
               [-3, 1, 1, -3, 1, 1, 3, -3, -1, -3, -1, 3, -3, 3, -1, -1, -1, -3],
               [1, -3, -1, -3, 3, 3, -1, -3, 1, -3, -3, -1, -3, -1, 1, 3, 3, 3],
               [-3, -3, 1, -1, -1, 1, 1, -3, -1, 3, 3, 3, 3, -1, 3, 1, 3, 1],
               [3, -1, -3, 1, -3, -3, -3, 3, 3, -1, 1, -3, -1, 3, 1, 1, 3, 3],
               [3, -1, -1, 1, -3, -1, -3, -1, -3, -3, -1, -3, 1, 1, 1, -3, -3, 3],
               [-3, -3, 1, -3, 3, 3, 3, -1, 3, 1, 1, -3, -3, -3, 3, -3, -1, -1],
               [-3, -1, -1, -3, 1, -3, 3, -1, -1, -3, 3, 3, -3, -1, 3, -1, -1, -1],
               [-3, -3, 3, 3, -3, 1, 3, -1, -3, 1, -1, -3, 3, -3, -1, -1, -1, 3],
               [-1, -3, 1, -3, -3, -3, 1, 1, 3, 3, -3, 3, 3, -3, -1, 3, -3, 1],
               [-3, 3, 1, -1, -1, -1, -1, 1, -1, 3, 3, -3, -1, 1, 3, -1, 3, -1]]

PHITABLE24 =[[ -1, -3, 3, -1, 3, 1, 3, -1, 1, -3, -1, -3, -1, 1, 3, -3, -1, -3, 3, 3, 3, -3, -3, -3],
            [ -1, -3, 3, 1, 1, -3, 1, -3, -3, 1, -3, -1, -1, 3, -3, 3, 3, 3, -3, 1, 3, 3, -3, -3],
            [ -1, -3, -3, 1, -1, -1, -3, 1, 3, -1, -3, -1, -1, -3, 1, 1, 3, 1, -3, -1, -1, 3, -3, -3],
            [  1, -3, 3, -1, -3, -1, 3, 3, 1, -1, 1, 1, 3, -3, -1, -3, -3, -3, -1, 3, -3, -1, -3, -3],
            [ -1, 3, -3, -3, -1, 3, -1, -1, 1, 3, 1, 3, -1, -1, -3, 1, 3, 1, -1, -3, 1, -1, -3, -3],
            [ -3, -1, 1, -3, -3, 1, 1, -3, 3, -1, -1, -3, 1, 3, 1, -1, -3, -1, -3, 1, -3, -3, -3, -3],
            [ -3, 3, 1, 3, -1, 1, -3, 1, -3, 1, -1, -3, -1, -3, -3, -3, -3, -1, -1, -1, 1, 1, -3, -3],
            [ -3, 1, 3, -1, 1, -1, 3, -3, 3, -1, -3, -1, -3, 3, -1, -1, -1, -3, -1, -1, -3, 3, 3, -3],
            [ -3, 1, -3, 3, -1, -1, -1, -3, 3, 1, -1, -3, -1, 1, 3, -1, 1, -1, 1, -3, -3, -3, -3, -3],
            [  1, 1, -1, -3, -1, 1, 1, -3, 1, -1, 1, -3, 3, -3, -3, 3, -1, -3, 1, 3, -3, 1, -3, -3],
            [ -3, -3, -3, -1, 3, -3, 3, 1, 3, 1, -3, -1, -1, -3, 1, 1, 3, 1, -1, -3, 3, 1, 3, -3],
            [ -3, 3, -1, 3, 1, -1, -1, -1, 3, 3, 1, 1, 1, 3, 3, 1, -3, -3, -1, 1, -3, 1, 3, -3],
            [  3, -3, 3, -1, -3, 1, 3, 1, -1, -1, -3, -1, 3, -3, 3, -1, -1, 3, 3, -3, -3, 3, -3, -3],
            [ -3, 3, -1, 3, -1, 3, 3, 1, 1, -3, 1, 3, -3, 3, -3, -3, -1, 1, 3, -3, -1, -1, -3, -3],
            [ -3, 1, -3, -1, -1, 3, 1, 3, -3, 1, -1, 3, 3, -1, -3, 3, -3, -1, -1, -3, -3, -3, 3, -3],
            [ -3, -1, -1, -3, 1, -3, -3, -1, -1, 3, -1, 1, -1, 3, 1, -3, -1, 3, 1, 1, -1, -1, -3, -3],
            [ -3, -3, 1, -1, 3, 3, -3, -1, 1, -1, -1, 1, 1, -1, -1, 3, -3, 1, -3, 1, -1, -1, -1, -3],
            [  3, -1, 3, -1, 1, -3, 1, 1, -3, -3, 3, -3, -1, -1, -1, -1, -1, -3, -3, -1, 1, 1, -3, -3],
            [ -3, 1, -3, 1, -3, -3, 1, -3, 1, -3, -3, -3, -3, -3, 1, -3, -3, 1, 1, -3, 1, 1, -3, -3],
            [ -3, -3, 3, 3, 1, -1, -1, -1, 1, -3, -1, 1, -1, 3, -3, -1, -3, -1, -1, 1, -3, 3, -1, -3],
            [ -3, -3, -1, -1, -1, -3, 1, -1, -3, -1, 3, -3, 1, -3, 3, -3, 3, 3, 1, -1, -1, 1, -3, -3],
            [  3, -1, 1, -1, 3, -3, 1, 1, 3, -1, -3, 3, 1, -3, 3, -1, -1, -1, -1, 1, -3, -3, -3, -3],
            [ -3, 1, -3, 3, -3, 1, -3, 3, 1, -1, -3, -1, -3, -3, -3, -3, 1, 3, -1, 1, 3, 3, 3, -3],
            [ -3, -1, 1, -3, -1, -1, 1, 1, 1, 3, 3, -1, 1, -1, 1, -1, -1, -3, -3, -3, 3, 1, -1, -3],
            [ -3, 3, -1, -3, -1, -1, -1, 3, -1, -1, 3, -3, -1, 3, -3, 3, -3, -1, 3, 1, 1, -1, -3, -3],
            [ -3, 1, -1, -3, -3, -1, 1, -3, -1, -3, 1, 1, -1, 1, 1, 3, 3, 3, -1, 1, -1, 1, -1, -3],
            [ -1, 3, -1, -1, 3, 3, -1, -1, -1, 3, -1, -3, 1, 3, 1, 1, -3, -3, -3, -1, -3, -1, -3, -3],
            [  3, -3, -3, -1, 3, 3, -3, -1, 3, 1, 1, 1, 3, -1, 3, -3, -1, 3, -1, 3, 1, -1, -3, -3],
            [ -3, 1, -3, 1, -3, 1, 1, 3, 1, -3, -3, -1, 1, 3, -1, -3, 3, 1, -1, -3, -3, -3, -3, -3],
            [  3, -3, -1, 1, 3, -1, -1, -3, -1, 3, -1, -3, -1, -3, 3, -1, 3, 1, 1, -3, 3, -3, -3, -3]]

PRIME = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89,    \
         97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191,  \
         193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, \
         307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, \
         421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, \
         547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, \
         659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, \
         797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, \
         929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039,      \
         1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, \
         1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, \
         1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, \
         1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, \
         1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, \
         1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, \
         1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, \
         1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, \
         2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, \
         2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, \
         2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, \
         2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, \
         2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, \
         2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, \
         2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, \
         3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, \
         3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271]
PRIME.reverse()
           
class LOWPAPRs(object):
    def __init__(self, U, V, alpha, m):
        self.u = U          # group number for (0~29)
        self.v = V          # sequence number for (0/1)
        self.alpha = alpha  
        self.m = m

    # This function returns the low peak to average power ratio(low-papr) sequence of length M, 
    # given the group number U, sequence number V and cyclic shift alpha, as defined in section5,2,2 TS.38.211

    def gen_base(self):
        fu = float(self.u)
        fv = float(self.v)
        fm = float(self.m)
        # final_seq = np.zeros((self.m, len(self.alpha)), dtype=complex)

        if (fm < 36) and (fm % 6 != 0):
            return False
        
        list_index = [i for i in range(self.m)]
        n_list_index = np.array(list_index)
        
        if fm == 0:
            return [0]
        elif fm < 30:
            phi = self.get_phi(self.u, self.m)
            n_phi = np.array(phi)
            n_list = 1j * n_phi * math.pi / 4
            return np.exp(n_list)
        elif fm == 30:
            n_list = -1j * math.pi * fu * (n_list_index + 1) * (n_list_index + 2) / 31
            return np.exp(n_list)
        else:
            nzc = self.get_prime(fm)
            qbar = nzc * (fu + 1) / 31
            q = math.floor(qbar + 0.5) + fv * math.pow(-1, math.floor(2 * qbar))
            seq1 = [i for i in range(int(nzc))]
            seq2 = [i for i in range(int(fm - nzc))]
            n_index = np.array(seq1 + seq2)
            n_list = -1j * math.pi * q * n_index * (n_index + 1) / nzc
            base_seq = np.exp(n_list)
            return base_seq

    def gen_base_seq(self):
        base_seq = self.gen_base()
        final_seq = np.zeros((self.m, len(self.alpha)), dtype=complex)

        list_index = [i for i in range(self.m)]
        n_list_index = np.array(list_index)
        
        for i in range(len(self.alpha)):
            ne_list = 1j * n_list_index * self.alpha[i]
            e_list = np.exp(ne_list)
            res = e_list * base_seq
            final_seq[:,i] = res
        return final_seq
            

    def get_prime(self, limit):
        for i in range(len(PRIME)):
            if PRIME[i] < limit:
                return PRIME[i]

    def get_phi(self, u, m):
        if m == 6:
            return PHITABLE6[u]
        elif m == 12:
            return PHITABLE12[u]
        elif m == 18:
            return PHITABLE18[u]
        else: 
            return PHITABLE24[u]

def basic_generate_c_sequence(cinit, c_len):
    c_seq = []
    x2 = []
    x2_temp = [int(x) for x in bin(cinit)[2:]]
    if len(x2_temp) > 31:
        print('Error: cinit sequence is greater than 31 bits')
    else:
        x2 = [0] * (31 - len(x2_temp))
        for n in range(0, len(x2_temp), 1):
    	    x2.append(x2_temp[n])
        x1 = [0] * 30 + [1]
        for n in range(0, 1600, 1):
            x2_update = (x2[27] + x2[28] + x2[29] + x2[30]) % 2
            x2 = [x2_update] + x2[:-1]
            x1_update = (x1[27] + x1[30]) % 2
            x1 = [x1_update] + x1[:-1]
        for n in range(0, c_len, 1):
            c_seq.append((x1[30]+x2[30]) % 2)
            x2_update = (x2[27] + x2[28] + x2[29] + x2[30]) % 2
            x2 = [x2_update] + x2[:-1]
            x1_update = (x1[27] + x1[30]) % 2
            x1 = [x1_update] + x1[:-1]
        return c_seq
    return [0]

def basic_cinit_calc(c_seq, c_seq_len):
    c_init = 0
    for n in range(0, c_seq_len, 1):
        c_init = c_init + (2**n) * c_seq[n]
    return c_init

if __name__ == '__main__':
    print(PHITABLE12[1][1])
    print(PHITABLE6[1][1])
    print(PHITABLE18[1][1])

