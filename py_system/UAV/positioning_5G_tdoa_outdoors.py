#!/usr/bin/python3
# -*- coding: utf-8 -*-

import os
import sys
import math
import re
import random
import numpy as np
import matplotlib.pyplot as plt
from numpy.linalg import inv
import scipy.constants as spy_constants
from uav_tdoa import Sim2DCord
from scipy.optimize import fsolve
from scipy.optimize import leastsq

class Sim3DCord(object):
    def __init__(self, x, y, z=0):
        self.x = x
        self.y = y
        self.z = z

    def calc_distance(self, dest):
        return math.sqrt((self.x - dest.x)**2 + (self.y - dest.y)**2 + (self.z - dest.z)**2)
 
    def debug_print(self):
        print('Coordinate is : %.6f, %.6f, %.6f' % (self.x, self.y, self.z))

# From : 3D TDOA Problem Solution with Four Receiving Nodes, J. D. Gonzalez, R. Alvarez, etc., 27 June, 2019.
# dt21 : UE to bs2 and bs1 TOA difference
# dt31 : UE to bs3 and bs1 TOA difference
# dt41 : UE to bs4 and bs1 TOA difference
def tdoa_positioning_4bs_improve(bs1, bs2, bs3, bs4, dt21, dt31, dt41, x_init, y_init, z_init, method='newton'):
    position = Sim3DCord(0.0, 0.0, 0.0)
    light_speed = spy_constants.speed_of_light
    def equations_3d(p):
        x, y, z = p
        r1 = math.sqrt((x-bs1.x)**2 + (y-bs1.y)**2 + (z-bs1.z)**2)
        r2 = math.sqrt((x-bs2.x)**2 + (y-bs2.y)**2 + (z-bs2.z)**2)
        r3 = math.sqrt((x-bs3.x)**2 + (y-bs3.y)**2 + (z-bs3.z)**2)
        r4 = math.sqrt((x-bs4.x)**2 + (y-bs4.y)**2 + (z-bs4.z)**2)
        return (r2 - r1 - light_speed*dt21, r3 - r1 - light_speed*dt31, r4 - r1 - light_speed*dt41)
    
    def taylor_solver(bs1, bs2, bs3, bs4, L, R, U):
        x = 0
        y = 0
        z = 0
        XL = bs2.x - bs1.x
        YL = bs2.y - bs1.y
        ZL = bs2.z - bs1.z
        XR = bs3.x - bs1.x
        YR = bs3.y - bs1.y
        ZR = bs3.z - bs1.z
        XU = bs4.x - bs1.x
        YU = bs4.y - bs1.y
        ZU = bs4.z - bs1.z
        E = L*L - XL*XL - YL*YL - ZL*ZL
        F = R*R - XR*XR - YR*YR - ZR*ZR
        G = U*U - XU*XU - YU*YU - ZU*ZU
        delta = -8 * (XL*YR*ZU+XU*YL*ZR+XR*YU*ZL-XL*YU*ZR-XR*YL*ZU-XU*YR*ZL)
        delta1 = 4*(YR*ZU-YU*ZR)
        delta2 = 4*(YL*ZU-YU*ZL)
        delta3 = 4*(YL*ZR-YR*ZL)
        # print("delta := ", delta, delta1, delta2, delta3)
        MX = (2/delta)*(L*delta1-R*delta2+U*delta3)
        NX = (1/delta)*(E*delta1-F*delta2+G*delta3)
        # print("MX, NX := ", MX, NX)
        delta1 = 4*(XR*ZU-XU*ZR)
        delta2 = 4*(XL*ZU-XU*ZL)
        delta3 = 4*(XL*ZR-XR*ZL)
        MY = (2/delta)*(-L*delta1+R*delta2-U*delta3)
        NY = (1/delta)*(-E*delta1+F*delta2-G*delta3)
        # print("MY, NY := ", MY, NY)
        delta1 = 4*(XR*YU-XU*YR)
        delta2 = 4*(XL*YU-XU*YL)
        delta3 = 4*(XL*YR-XR*YL)
        MZ = (2/delta)*(L*delta1-R*delta2+U*delta3)
        NZ = (1/delta)*(E*delta1-F*delta2+G*delta3)
        
        a = MX*MX+MY*MY+MZ*MZ - 1
        b = 2*(MX*NX+MY*NY+MZ*NZ)
        c = NX*NX+NY*NY+NZ*NZ

        if (b*b-4*a*c) < 0:
            x = np.NaN
            y = np.NaN
            z = np.NaN
            return x, y, z

        k1 = (-b + np.sqrt(b*b-4*a*c))/(2*a)
        k2 = (-b - np.sqrt(b*b-4*a*c))/(2*a)
        
        x1 = MX*k1+NX+bs1.x
        y1 = MY*k1+NY+bs1.y
        z1 = MZ*k1+NZ+bs1.z
        x2 = MX*k2+NX+bs1.x
        y2 = MY*k2+NY+bs1.y
        z2 = MZ*k2+NZ+bs1.z
        # print('        %.6f, %.6f' % (z1, z2))
        
        if k2 < 0:
            x = x1
            y = y1
            z = z1
        else:
            r_ref = math.sqrt((x1-bs1.x)**2+(y1-bs1.y)**2+(z1-bs1.z)**2)
            r2_ref = math.sqrt((x1-bs2.x)**2+(y1-bs2.y)**2+(z1-bs2.z)**2)
            r3_ref = math.sqrt((x1-bs3.x)**2+(y1-bs3.y)**2+(z1-bs3.z)**2)
            r4_ref = math.sqrt((x1-bs4.x)**2+(y1-bs4.y)**2+(z1-bs4.z)**2)
            sum1 = ((r2_ref - r_ref) - L)**2 + ((r3_ref - r_ref) - R)**2 + ((r4_ref - r_ref) - U)**2
            
            r_ref2 = math.sqrt((x2-bs1.x)**2+(y2-bs1.y)**2+(z2-bs1.z)**2)
            r2_ref2 = math.sqrt((x2-bs2.x)**2+(y2-bs2.y)**2+(z2-bs2.z)**2)
            r3_ref2 = math.sqrt((x2-bs3.x)**2+(y2-bs3.y)**2+(z2-bs3.z)**2)
            r4_ref2 = math.sqrt((x2-bs4.x)**2+(y2-bs4.y)**2+(z2-bs4.z)**2)
            sum2 = ((r2_ref2 - r_ref2) - L)**2 + ((r3_ref2 - r_ref2) - R)**2 + ((r4_ref2 - r_ref2) - U)**2
            # print('sum1, sum2 := %.6e %.6e (%.6f %.6f %.6f) (%.6f %.6f %.6f)' % (sum1, sum2, x1, y1, z1, x2, y2, z2))

            if sum1 < sum2 and (x1 > 0) and (y1 > 0) and (z1>2) and (z1 < 100):
                x = x1
                y = y1
                z = z1
            else:
                x = x2
                y = y2
                z = z2
        return x, y, z
    
    def scipy_3d_solver():
        if method.lower() == 'newton':
            x_est, y_est, z_est = fsolve(equations_3d, (x_init, y_init, z_init), maxfev=2000)
        elif method.lower() == 'taylor-direct':
            # print("Use the taylor-direct method ...")
            r21 = light_speed * dt21
            r31 = light_speed * dt31
            r41 = light_speed * dt41
            x_est, y_est, z_est = taylor_solver(bs1, bs2, bs3, bs4, r21, r31, r41)
        else:
            x = leastsq(equations_3d, (x_init, y_init, z_init))
            x_est = x[0][0]
            y_est = x[0][1]
            z_est = x[0][2]
        # print("solver() results : (%.6f, %.6f, %.6f)" % (x_est, y_est, z_est))
        if (np.isnan(x_est) or np.isnan(y_est) or np.isnan(z_est)):
            x_est, y_est, z_est = fsolve(equations_3d, (x_init, y_init, z_init), maxfev=1000)
            # print("solver() results (through modified) : (%.6f, %.6f, %.6f)" % (x_est, y_est, z_est))
        return x_est, y_est, z_est
    x_est, y_est, z_est = scipy_3d_solver()
    position.x = x_est
    position.y = y_est
    position.z = z_est
    return position

def tdoa_positioning_5bs_assist(bs1, bs2, bs3, bs4, bs5, dt21, dt31, dt41, dt51, x_init, y_init, z_init, method='newton'):
    position = Sim3DCord(0.0, 0.0, 0.0)
    light_speed = spy_constants.speed_of_light
    def equations_3d(p):
        x, y, z = p
        r1 = math.sqrt((x-bs1.x)**2 + (y-bs1.y)**2 + (z-bs1.z)**2)
        r2 = math.sqrt((x-bs2.x)**2 + (y-bs2.y)**2 + (z-bs2.z)**2)
        r3 = math.sqrt((x-bs3.x)**2 + (y-bs3.y)**2 + (z-bs3.z)**2)
        r4 = math.sqrt((x-bs4.x)**2 + (y-bs4.y)**2 + (z-bs4.z)**2)
        return (r2 - r1 - light_speed*dt21, r3 - r1 - light_speed*dt31, r4 - r1 - light_speed*dt41)
    
    def taylor_solver(bs1, bs2, bs3, bs4, bs5, L, R, U, r51):
        x = 0
        y = 0
        z = 0
        XL = bs2.x - bs1.x
        YL = bs2.y - bs1.y
        ZL = bs2.z - bs1.z
        XR = bs3.x - bs1.x
        YR = bs3.y - bs1.y
        ZR = bs3.z - bs1.z
        XU = bs4.x - bs1.x
        YU = bs4.y - bs1.y
        ZU = bs4.z - bs1.z
        E = L*L - XL*XL - YL*YL - ZL*ZL
        F = R*R - XR*XR - YR*YR - ZR*ZR
        G = U*U - XU*XU - YU*YU - ZU*ZU
        delta = -8 * (XL*YR*ZU+XU*YL*ZR+XR*YU*ZL-XL*YU*ZR-XR*YL*ZU-XU*YR*ZL)
        delta1 = 4*(YR*ZU-YU*ZR)
        delta2 = 4*(YL*ZU-YU*ZL)
        delta3 = 4*(YL*ZR-YR*ZL)
        # print("delta := ", delta, delta1, delta2, delta3)
        MX = (2/delta)*(L*delta1-R*delta2+U*delta3)
        NX = (1/delta)*(E*delta1-F*delta2+G*delta3)
        # print("MX, NX := ", MX, NX)
        delta1 = 4*(XR*ZU-XU*ZR)
        delta2 = 4*(XL*ZU-XU*ZL)
        delta3 = 4*(XL*ZR-XR*ZL)
        MY = (2/delta)*(-L*delta1+R*delta2-U*delta3)
        NY = (1/delta)*(-E*delta1+F*delta2-G*delta3)
        # print("MY, NY := ", MY, NY)
        delta1 = 4*(XR*YU-XU*YR)
        delta2 = 4*(XL*YU-XU*YL)
        delta3 = 4*(XL*YR-XR*YL)
        MZ = (2/delta)*(L*delta1-R*delta2+U*delta3)
        NZ = (1/delta)*(E*delta1-F*delta2+G*delta3)
        
        a = MX*MX+MY*MY+MZ*MZ - 1
        b = 2*(MX*NX+MY*NY+MZ*NZ)
        c = NX*NX+NY*NY+NZ*NZ
        
        if (b*b-4*a*c) < 0:
            x = np.NaN
            y = np.NaN
            z = np.NaN
            return x, y, z

        k1 = (-b + np.sqrt(b*b-4*a*c))/(2*a)
        k2 = (-b - np.sqrt(b*b-4*a*c))/(2*a)
        
        x1 = MX*k1+NX+bs1.x
        y1 = MY*k1+NY+bs1.y
        z1 = MZ*k1+NZ+bs1.z
        x2 = MX*k2+NX+bs1.x
        y2 = MY*k2+NY+bs1.y
        z2 = MZ*k2+NZ+bs1.z
        # print('        (%.6f %.6f %.6f), (%.6f %.6f %.6f)' % (x1, y1, z1, x2, y2, z2))
        
        if k2 < 0:
            x = x1
            y = y1
            z = z1
        else:
            r_ref = math.sqrt((x1-bs1.x)**2+(y1-bs1.y)**2+(z1-bs1.z)**2)
            r2_ref = math.sqrt((x1-bs2.x)**2+(y1-bs2.y)**2+(z1-bs2.z)**2)
            r3_ref = math.sqrt((x1-bs3.x)**2+(y1-bs3.y)**2+(z1-bs3.z)**2)
            r4_ref = math.sqrt((x1-bs4.x)**2+(y1-bs4.y)**2+(z1-bs4.z)**2)
            sum1 = ((r2_ref - r_ref) - L)**2 + ((r3_ref - r_ref) - R)**2 + ((r4_ref - r_ref) - U)**2
            
            r_ref2 = math.sqrt((x2-bs1.x)**2+(y2-bs1.y)**2+(z2-bs1.z)**2)
            r2_ref2 = math.sqrt((x2-bs2.x)**2+(y2-bs2.y)**2+(z2-bs2.z)**2)
            r3_ref2 = math.sqrt((x2-bs3.x)**2+(y2-bs3.y)**2+(z2-bs3.z)**2)
            r4_ref2 = math.sqrt((x2-bs4.x)**2+(y2-bs4.y)**2+(z2-bs4.z)**2)
            sum2 = ((r2_ref2 - r_ref2) - L)**2 + ((r3_ref2 - r_ref2) - R)**2 + ((r4_ref2 - r_ref2) - U)**2

            if sum1 < 1E-6 and sum2 < 1E-6:
                r5_ref = math.sqrt((x1-bs5.x)**2+(y1-bs5.y)**2+(z1-bs5.z)**2)
                r5_ref2 = math.sqrt((x2-bs5.x)**2+(y2-bs5.y)**2+(z2-bs5.z)**2)
                assist1 = (r5_ref - r_ref - r51)**2
                assist2 = (r5_ref2 - r_ref2 - r51)**2
                # print('assist1, assist2 := %.6e %.6e (%.6f %.6f %.6f) (%.6f %.6f %.6f)' % (assist1, assist2, x1, y1, z1, x2, y2, z2))
                
                if assist1 < assist2:
                    x = x1
                    y = y1
                    z = z1
                else:
                    x = x2
                    y = y2
                    z = z2
            else:
                if (sum1 < sum2) and (x1 > 0) and (y1 > 0) and (z1>2):
                    x = x1
                    y = y1
                    z = z1
                else:
                    x = x2
                    y = y2
                    z = z2
        return x, y, z
    
    def scipy_3d_solver():
        if method.lower() == 'newton':
            x_est, y_est, z_est = fsolve(equations_3d, (x_init, y_init, z_init), maxfev=2000)
        elif method.lower() == 'taylor-direct':
            # print("Use the taylor-direct method ...")
            r21 = light_speed * dt21
            r31 = light_speed * dt31
            r41 = light_speed * dt41
            r51 = light_speed * dt51
            x_est, y_est, z_est = taylor_solver(bs1, bs2, bs3, bs4, bs5, r21, r31, r41, r51)
        else:
            x = leastsq(equations_3d, (x_init, y_init, z_init))
            x_est = x[0][0]
            y_est = x[0][1]
            z_est = x[0][2]
        if (np.isnan(x_est) or np.isnan(y_est) or np.isnan(z_est)):
            x_est, y_est, z_est = fsolve(equations_3d, (x_init, y_init, z_init), maxfev=1000)
            # print("solver() results (through modified) : (%.6f, %.6f, %.6f)" % (x_est, y_est, z_est))
        # print("solver() results : (%.6f, %.6f, %.6f)" % (x_est, y_est, z_est))
        return x_est, y_est, z_est
    x_est, y_est, z_est = scipy_3d_solver()
    position.x = x_est
    position.y = y_est
    position.z = z_est
    return position

TX_POWER = 180

def signal2distance(sig, mode):
    if mode == 0:
        return 10**((TX_POWER - sig - 32.4 - 20 * np.log10(2.6)) / 17.3)
    elif mode == 1:
        return 10**((TX_POWER - sig - 28 - 20 * np.log10(2.6)) / 22)
    else:
        return 0.

def find_most_average(e_list):
    size = np.size(e_list)
    near_counter = np.zeros(np.size(e_list), dtype=int)
    for i in range(size):
        e = e_list[i]
        for k in range(size):
            if abs(e-e_list[k]) < 5.0:
                near_counter[i] += 1
    indices = near_counter.argmax()
    basic_value = e_list[indices]
    average = 0.
    counter = 0
    for i in range(size):
        if abs(e_list[i] - basic_value) < 5.0:
            average += e_list[i]
            counter += 1
    return average / counter

if __name__ == "__main__":
    print("Positioning test")
    light_speed = spy_constants.speed_of_light
    print('Outdoors simulation !')
    bs1 = Sim3DCord(1000, 1900, 60)
    bs2 = Sim3DCord(1000, 1000, 80)
    bs3 = Sim3DCord(1900, 1000, 10)
    bs4 = Sim3DCord(500, 1000, 40)
    bs5 = Sim3DCord(700, 800, 50)
    ue = '747.9323799277624, 1252.6049111221294, 46.192121100697385, 266.6955747229769, 1638.382948993473, 22.128260316074297, 30.04177295753374, 472.76861464589757, 6.414906583530452, 1995.6030361887222, 1523.7053994257215, 78.37204775489352, 1184.1126351665148, 458.37983898973846, 52.10986960582089, 1870.0290098708751, 1124.989493516789, 73.43574354025019, 512.9674396476189, 1168.2794681153946, 18.970884038449757, 1228.7012184266507, 373.3246286707741, 11.545763520983652, 1519.3444201524776, 1289.6178958000926, 80.0651462792733, 333.72638161220823, 1670.2579152472717, 23.693103427462848, 911.2727281503552, 1103.2901078653265, 85.62176725962358, 1735.1120997860987, 297.33105901625635, 8.35547872760917, 1606.5272474869926, 713.833501196604, 77.11091952636167, 1959.4925057541175, 848.1079676613567, 5.413833747229652, 213.59228299109878, 886.1407704903717, 14.550672631132649, 1256.6094943991097, 554.9535778154693, 67.23320062682315, 1333.4148818479243, 802.5294604997617, 78.59342157224268, 49.139253276037074, 1461.964893851867, 24.939999538431728, 874.0287014472552, 1692.112299179874, 19.26196255629531, 1449.6926559251813, 754.1019078809803, 9.53376524127296, 1135.0002220678841, 1152.5044049664057, 74.02402764922618, 1961.7127303033571, 1963.9820947103221, 63.093325827323014, 432.48728069178145, 226.16389486338218, 73.26103885930618, 1263.4221295470518, 1762.392610588613, 27.6050813318516, 1242.8203279795762, 1376.5784395898227, 56.139351551411686, 1785.7491063598245, 348.935279150135, 61.24683459205709, 35.380069487544134, 782.6516075532448, 32.65925923552686, 1795.3467987621161, 1778.9810104952176, 21.13126361292857, 1886.158528513491, 715.1506142533972, 66.91384477468624, 1003.3337393804788, 1622.8762291724238, 88.56642332201544, 1416.9541237832486, 1845.8746899035852, 61.71546734578518, 1968.1836773232533, 114.72024037540196, 71.54685891565364, 1552.6577768094487, 1802.0576617145796, 65.43501115338815, 1518.207120246373, 963.2731254457387, 65.05024170830376, 929.6939381818028, 1586.3768428660394, 64.49968059952914, 54.31217193476323, 1207.9764226805796, 85.03809550873879, 314.4878027692337, 1635.1735580457719, 57.28801970379308, 414.74635033759586, 1475.8615707057072, 5.019571043907282, 84.47015669113745, 1129.9600241516434, 55.09200941911333, 1727.6896219809064, 1789.832217562158, 67.04571257882284, 164.6034983940523, 1935.8746177570595, 92.78395256105289, 1408.038833871317, 182.50796731354814, 11.51027099387677, 434.42827495505475, 1497.4536425501594, 95.51561581098436, 1513.9059165599344, 1116.4975530367308, 4.655794122741518, 1432.493596933316, 947.8455833391522, 45.92268577172509, 887.2299149926295, 655.0998063122861, 86.93441376679303, 1217.4441553635663, 1580.5797533974708, 86.30875983837207, 1089.6675222129447, 574.4362865964385, 26.628366354132623, 191.57771385276635, 71.96477682474355, 93.78289559526277, 1624.4107086946908, 1044.5955260423548, 20.05853898106892, 118.6423522206459, 124.66664039937014, 62.49210645169667, 776.8643460056652, 287.64479654297736, 55.383016800928324, 625.9870771128686, 1627.9074596527184, 72.96357864246595, 496.75275725429844, 338.91211548901225, 45.398047149318096, 440.6563331559732, 1424.7424049156093, 90.24263929025811, 901.8511336055019, 1327.557340174034, 48.025021306931656, 748.4708322098326, 508.17226065025477, 17.917348988528104, 580.0775391519737, 1918.85198858957, 53.86512814687356, 409.2404187764558, 93.01597365485792, 90.03120884311949, 938.7541322695794, 1088.2914761687548, 33.798801102462576, 1575.0336436340376, 1900.5747155147653, 35.187441559599876, 1006.6847302262358, 613.935262547286, 8.326184800848745, 871.684472770248, 596.8493197197702, 41.46353513921172, 953.5052674143185, 1183.1312852073343, 38.322341368069274, 1173.0502276079364, 1272.1829787205231, 16.005079640010436, 1055.8114307886442, 623.9341713155097, 46.55902269883702, 665.2025645379654, 1220.3705001280282, 8.424095920850256, 1427.0587633460316, 1381.283419937106, 70.05714292376204, 838.7828538382065, 1327.7708269951004, 80.08530482674132, 1508.90437214363, 994.2716291397786, 12.23617489669247, 1260.024020760219, 1297.127663209028, 15.678943646077197, 173.3999969530362, 882.1871440506557, 81.9738977205724, 1248.3614116922365, 523.5804311732514, 99.83822354491585, 90.42845655509768, 1329.0895120325388, 97.28068731184945, 766.7427039403165, 13.720297534929093, 92.3911596942617, 1410.662966915682, 601.2711137462242, 44.182267859989786, 266.3481828561951, 1798.7136088805776, 73.97131367412234, 1722.3443335214806, 107.55732641660786, 45.55016037358593, 1339.899380580997, 1390.6108965667381, 77.15104365243393, 563.985741183616, 766.788717648661, 60.27773254522263, 771.5649510293451, 908.1325485795069, 66.09823233254343, 572.5741218935907, 1563.1096464910806, 19.33228657986916, 144.12414976259046, 626.4095383255443, 48.67723421053986, 999.3460284143232, 1289.4309940592887, 97.19703740002656, 1266.4475361059465, 379.1723083256227, 78.05795289316009, 1928.7801257637584, 1636.672201355269, 13.51989040277923, 708.4131069951825, 1475.8230432886908, 59.5953996480248, 1237.5804397336253, 1317.0928705863764, 67.06146395651335, 201.26843146603534, 23.77983241474424, 75.04026308196127, 819.0177402845402, 1577.414584447406, 48.11044031535761, 1627.0181997280167, 64.52703388885594, 92.43037187607362, 1084.3213357282866, 821.855411915067, 65.71231455352662, 940.3184631207646, 1738.7502872293549, 42.14141516012606, 1696.443482351377, 117.49739591959197, 71.00632430535651, 1149.1003753949597, 5.136353746268751, 44.14600671736561, 1340.5941117530685, 1688.292565617412, 18.737558766572338, 813.8461740913154, 44.60778244921726, 73.7175092507714, 543.5914431934655, 1184.3933726620144, 89.33895144917412, 1124.4883955397015, 886.7258964852684, 25.217711514924027, 248.7231387919342, 1729.104760862869, 78.51766085212681, 293.250649681609, 745.4611114787261, 66.05359636310523, 451.84637281758745, 533.7212771229529, 52.46372517623669, 1537.452643480294, 746.2201999208218, 14.081737439324563, 1702.0988005876159, 1072.6065750344235, 65.62353199494346, 1331.2352457424101, 300.64296420100624, 82.97151200818625, 1988.4003800912922, 596.0053057815351, 26.437479458194986, 885.7596175362323, 1311.916044149633, 98.31741370238778, 224.3056265933041, 918.6263444971854, 32.98371655228803, 1578.8594185288378, 430.5004075572414, 19.878604082931894, 886.0142544834874, 1784.926622999786, 82.62096781522666, 346.9191128745124, 92.22144294907596, 16.79937919638224, 1579.1126403289645, 1573.4355555982402, 91.5849611181664, 323.56694945972754, 1449.3462744404412, 68.92705955090142, 1302.0390539683508, 451.0184957084582, 49.904291660556666, 732.421935047143, 938.2962556758052, 77.43678307196802, 1128.0520256193327, 1486.6056728353756, 29.48537959320518, 1178.2643698578172, 1213.4131379753996, 27.94468433575593, 815.186274156183, 1548.682176421635, 7.40484771938605, 1572.4847107905157, 1404.9303657508158, 88.38266557868351, 1185.3775098311228, 1063.8079167814892, 68.7003135879227, 561.6463437184959, 1979.9472267449341, 83.5129536696784, 200.3672694159362, 1341.5738346837395, 17.650414560838364, 874.6522140385797, 1680.1753867939346, 46.752730618164, 620.845879335991, 1557.9298277256512, 24.695736327625138, 476.9195321268924, 480.0698337366016, 14.61479298218952, 1478.3363789372459, 1524.344248430365, 27.927591033333385, 685.0965631958323, 1015.2799359920958, 8.35866959449666, 1901.4773795696478, 1798.5672751009251, 50.09944549971763, 34.12574450259087, 727.522647552866, 33.219188594935936, 1588.7908536725713, 1014.7016610914767, 14.957401759534715, 424.7684828741194, 1962.542787599888, 90.66931318196558, 578.6073032088606, 723.0705777482034, 26.974331201125707, 1300.9811758149017, 344.3306677895117, 45.263089644615015, 1208.409141373584, 1942.4249726401076, 27.950035938389522, 77.23339397595397, 153.18308185508388, 17.01952312213995, 69.01074513060878, 352.0233698581332, 29.456500277470756, 406.69787697488323, 710.1051682500029, 15.567711581239212, 591.0483451605122, 528.7446480407441, 78.98203799082572, 76.56169456212191, 925.1150890741246, 60.89486129624735, 1834.096795368687, 1376.1320899650584, 36.45361413960327, 1856.4765631213543, 1964.0870501402846, 92.21819578398654, 1471.9041944590354, 934.7100785300253, 19.697370538450997, 184.4985138842934, 270.0741690232609, 35.677574946839336, 1446.5768830635018, 1350.5926472535712, 4.156926298909377, 941.4635129273088, 147.2941627522584, 77.71425323599045, 633.6952141229191, 1789.1798351916673, 96.34528604131654, 172.1069413549754, 601.2512146114494, 70.48314188171778, 1952.0897997386612, 1822.072561684035, 76.03835715052625, 1182.0027633307086, 61.7912638899778, 41.11797752654431, 200.281060168638, 1080.8149044459153, 66.35860855200289, 565.8549921332329, 1617.9322158455534, 75.4379734455224, 962.8792256445205, 260.73951852002943, 80.66597020140438, 1170.4473018068854, 51.77549728577668, 5.213899265419925, 1019.27909249711, 307.7300245727961, 66.59473694913018, 1572.4338365383574, 652.7607186932838, 99.12812728865853, 646.617223356519, 1533.1137720405097, 78.26953243032843, 160.99758625608862, 1296.9247749010797, 40.739327769707145, 1645.739282094314, 1923.1072242567514, 80.06101576095539, 977.8026954701998, 1999.2036487946477, 98.9963576847302, 1468.9033599497411, 711.6437333616245, 97.53478822369351, 539.8786749604876, 1464.0757620698269, 81.32940913002518, 3.1907208921084784, 1972.688020086487, 8.267312598819364, 617.380689882995, 1818.501362456501, 92.83530225247456, 885.998936014218, 952.4377037817407, 8.590595326704655, 1332.1878766958773, 1954.6606809832008, 51.60633131186492, 93.99156849271306, 1440.2791327631064, 9.360218073905196, 753.6970663307422, 585.5124812493506, 46.91432275590408, 1130.0379535469601, 1991.8097367309012, 73.74781553446034, 1531.4968683103784, 692.1519821272493, 30.35230894379005, 725.6588185189348, 444.1598167371752, 95.56572519947589, 616.6554544307221, 1920.872372908995, 73.3290343593955, 606.133506035121, 609.6040342070936, 56.169870682775574, 1710.1764278556168, 1281.762668076709, 73.18906668521953, 1611.4374556435962, 1735.771172929634, 54.62226685468103, 1084.8717026991628, 1954.1267731153196, 69.03580616931325, 105.54476953937142, 1257.7019284835026, 12.378715092363674, 1042.281726627519, 392.3040130433677, 85.15667100241154, 916.2085894947368, 1744.3135948620363, 81.36382887230293, 1109.5956429192092, 1748.61328022127, 92.50038442844213, 40.51528801058257, 462.72915604917597, 2.099984081335902, 150.64549892208024, 1618.8920036295528, 98.64082894481456, 1726.1591633456355, 1608.3746181135393, 78.13591551987635, 1935.6838900685211, 549.9295351556235, 6.5392949655341095, 1569.6159568615894, 1598.1305047151775, 89.35070331861145, 174.97345635777873, 248.97874454243717, 80.1416479241813, 845.6203435829506, 774.3198958342781, 16.796939474345034, 670.0567919906157, 1438.285265499716, 14.683350352120389, 695.5334859970084, 383.9525116055209, 98.30914050858641, 950.7799800502216, 656.5200523987702, 87.35395543833488, 1311.9242309824876, 762.3428049498524, 66.55706223572518, 668.3303017504883, 529.8869985050947, 90.9851169312108, 187.36447593851025, 1772.0631428413635, 49.92574967823429, 854.1544794595075, 1504.4905741049072, 66.02514133684156, 275.3873603513206, 117.57590332242151, 56.95700179449374, 15.92033483660793, 1498.1635068751734, 28.375057306740576, 1145.683294962269, 982.0222843234385, 85.71419376326381, 382.6808657852452, 33.63714188728451, 33.350783992422336, 1373.1237596850692, 900.6133498058811, 46.00581623679495, 752.8628529751476, 1400.0162661576085, 77.85143008803266, 1313.4813443903656, 1597.1395662110351, 28.52022688937505, 1603.7450235015713, 859.7263024734099, 75.40671192191253, 629.8080757217988, 1692.0668963176743, 28.42330003755453, 1644.7012465270898, 376.0764297107206, 6.977669793414213, 1051.6473492684622, 362.845474612401, 24.166406327450048, 991.9358156704099, 644.7687563111037, 7.559465674303132, 1299.234135239581, 654.5539525318418, 90.76374512865961, 366.44306903035704, 548.8997232445778, 28.456316879257322, 1151.4837578135046, 555.2988593029206, 60.22754207448316, 425.67506650464384, 1558.4296683544583, 47.37690105078153, 1665.9025418434994, 1797.685047518551, 67.90573921819946, 1781.2745189257032, 1833.2050364423649, 71.13025475044327, 1414.6376886360708, 512.586488607106, 91.52484481469311, 963.4447575935063, 1804.390561898431, 74.00763761906587, 1881.329416786352, 1729.595548009471, 46.91803303428034, 1396.9272163184326, 1787.6307829486936, 77.92532638514182, 1190.818939808536, 1738.2997173562944, 2.9903658361781984, 890.8925810099003, 816.6972139863165, 99.83325405143088, 1193.9151305167672, 1787.821272408205, 23.669291296031055, 1698.526149245601, 290.9975088892438, 86.09260556609489, 88.64998830632675, 1766.0297452363259, 32.800483333414626, 266.4148684497831, 1565.312982963726, 88.28258032644932, 1989.3162501600941, 841.8726126050873, 89.54078622023167, 1740.558779793004, 260.67262149034207, 99.92132606506695, 861.8605814144303, 259.6768950581496, 11.07076450093304, 0.7947156866936478, 717.4119833482084, 81.21772405088028, 1055.657429383093, 522.2936746654578, 82.55254364543099, 1194.8310474475127, 1108.5109206114082, 75.87532485147781, 944.884471576678, 235.84921644501966, 46.88208828296245, 19.90671162962343, 934.0381497309154, 48.4025768384064, 1916.9656718941403, 221.4523075855328, 13.324444796656962, 1343.3592178550482, 1273.1403236641008, 45.62412552583343, 559.7194968920531, 1262.2943613303498, 10.261029331871494, 1617.5862950542873, 527.1139803827349, 25.370836009194406, 1309.1965629673184, 464.1313124920592, 62.78159510303369, 1038.514369477443, 1884.4267983656264, 93.38966748652798, 1153.9759942680946, 83.61813592184019, 17.583165560215086, 579.1665669242996, 1887.522382941856, 28.893086044577615, 1821.4875298340642, 1833.8453347503398, 87.74979360853222, 840.6819383163939, 577.4074998493215, 83.77013933205686, 1978.8471660623738, 1742.8412393723484, 26.28033520894871, 872.5373609899518, 1795.2252479948424, 67.07949149232338, 1788.6407520195887, 148.7327560222753, 89.62044691833155, 500.03120349288446, 1603.2652893875356, 26.15464122308789, 511.0789249301704, 1548.7061183095736, 22.336815876180594, 1530.2921123429235, 275.81471480014466, 79.46100574303298, 1463.8999134840008, 1299.1624600465652, 29.07484938803383, 892.1626671440935, 787.4991374931666, 59.56660933285518, 1069.1818787144778, 623.723429493454, 35.885419840458795, 1696.9436295848889, 8.406494122872976, 25.397953295489707, 1165.839161223419, 1867.9866671292132, 28.74704437112485, 1380.2321075984496, 199.33585988402092, 98.0484657499632, 1452.6361663508078, 215.76187124333558, 14.71008558734293, 1423.835220892846, 1598.0885034528596, 92.93260118939162, 102.8385726960408, 1416.3885375070317, 99.00103741698888, 1682.8491912566553, 1225.9790329226425, 25.527704096621516, 1885.8580106593433, 935.8200935034049, 6.448976215607676, 1115.8935187644618, 62.255041817916855, 19.35793002975718, 666.2077231342463, 537.00410926273, 12.935842471682957, 996.9793364513087, 901.7065466725583, 9.570759427592044, 420.08983454876983, 1166.4801584744575, 17.12858335225117, 1278.6245239914708, 161.33323184260882, 48.05326369280683, 1758.0965622268325, 938.6857109454425, 15.334399764651941, 1590.0126088129007, 1960.4451149438119, 45.71095624602091, 1227.033446714846, 697.6090945078481, 87.60344852943763, 1931.7342893142538, 1960.9805684803448, 62.5768304691928, 32.63257619200877, 1930.6052967804067, 3.6541057307610254, 404.2352368724684, 1079.132533943884, 78.59312182928335, 427.31754534360044, 1106.37160683434, 39.240924403112615, 270.96897871738076, 910.9984580936497, 50.7139018531456, 1104.7919506939033, 1366.3118674154077, 52.283932704114726, 1648.2281653058094, 1463.9705021292436, 4.807785103304121, 1107.0759588789344, 1960.077262883991, 81.5314264390863, 1125.950130944042, 27.13738106951924, 62.22115946977092, 571.1009186882221, 651.6850119247579, 37.230012967898844, 1503.5978912048945, 992.1204261954173, 33.16923432933103, 1273.6032480459987, 418.75389034988797, 78.470925348764, 653.5679185314067, 251.65449023773735, 16.236537202627108, 1744.2904410528668, 846.2426737067718, 96.00516269820676, 1342.9008351561356, 1927.1667101937567, 61.48746410918097, 744.2198353169869, 1653.9115400071016, 80.90457029239172, 107.26912594365045, 1483.1873323126188, 42.12372536915512, 1880.691422147838, 1339.380917033797, 92.94468104954318, 1079.958915296962, 945.0594795986167, 75.96567961123178, 557.2447237141469, 484.6583925265069, 26.162042053341118, 671.0196312408916, 1419.436075379423, 3.418422574390168, 1436.3430689230008, 1870.0194446279252, 81.3022096562389, 1584.701930440052, 1004.7079881506728, 36.991231083027074, 107.96101863554952, 229.31373148616285, 85.66834508814131, 1750.0814440951804, 1182.3182856093827, 54.23474616293713, 1269.1270610984293, 1360.1197668482682, 46.091605689209956, 578.5334147604746, 1321.8014410555622, 7.256681247546982, 1852.22791380058, 1251.3445866960067, 76.87471386683737, 17.75858427721588, 1110.0179685515886, 63.43428975080751, 1223.009481481135, 165.4704498317281, 79.5387643238625, 1762.7770223751745, 3.4561725000894494, 43.476326106771985, 1273.364842187837, 1569.0870939150332, 64.01493479527741, 1941.0386211259404, 1429.4769979962675, 35.8144954248889, 700.5335522621905, 346.8336381228814, 13.59136823508435, 827.4275502547166, 1649.7992273654936, 83.41167575884269, 1459.8649522799278, 76.99170959817093, 27.470292693696596, 1569.9797030920938, 1822.9178228066503, 63.34432546444161, 1288.9231042814201, 1607.6628010354364, 94.30984353352231, 618.3319123779762, 1841.612902625051, 4.486064065736847, 1651.4231800448872, 1868.6869310411262, 20.283882683621208, 906.4983227490968, 1649.9960292381468, 3.808762937278292, 1919.3848649654476, 716.8418698320842, 68.58982712508099, 672.2239511388075, 1585.8036118358773, 91.80744811114538, 1147.3114915304338, 1803.5224957901569, 67.73985867792142, 329.3374754102074, 1036.4576323190242, 10.63152027717903, 1432.1642135953946, 442.4615416685131, 12.564915591098034, 442.79662882343194, 1753.9881469824686, 90.60947081446561, 1209.9089699809679, 1139.5684863229005, 24.15461661162865, 1893.853448964982, 935.8378364071496, 53.03202926276794, 57.80446333342959, 1248.4848191291055, 20.883184937279676, 1037.2526959859372, 1942.1141643631179, 87.37742789625972, 83.34917220738004, 1872.179357952852, 15.876589759829713, 1897.1290122211426, 768.0083067360464, 4.03061323480727, 325.2840681382327, 393.0042076635809, 11.33129271492187, 1573.0021641137837, 1904.1536296698723, 68.07127630798483, 470.9852839890194, 1607.2223939625137, 34.82553326244083, 1538.97171599837, 1061.1831603254022, 45.45580831527797, 1264.3394454130773, 529.5455553227466, 13.746316773714922, 1852.612319064327, 1135.8496747733927, 88.3292792000201, 1888.6589998867528, 1808.4945359595254, 74.62504764270665, 629.545078959878, 225.5579566245578, 48.9341920354126, 193.30830233829266, 1133.6089662282095, 5.5658130096144545, 674.313286511788, 120.08737978647454, 90.16833315409112, 1917.192589662945, 999.7417992531851, 35.08714298481321, 163.25833293387214, 1502.873984033484, 43.26893573573611, 762.6776635116765, 16.950304993532672, 80.52653757829304, 100.80587534477358, 1526.337779723602, 17.77532891156432, 1544.2519160994011, 118.45339316208326, 95.91645011593249, 468.47684677759725, 488.37965274661667, 22.953780681458742, 1084.0644747361127, 243.7392706068453, 35.41615918910588, 1850.5715820038881, 1082.7548026349991, 53.946335550345616, 111.39160372780688, 15.479961433878753, 18.055845970725937, 121.04354117885818, 1409.104696572357, 43.6123841529361, 863.7300563861883, 1589.6337042650484, 99.32282397596977, 1745.06833733298, 1918.6141331230874, 19.868717007447085, 1937.9306024748882, 632.0359967245192, 78.68210544873307, 832.7426077854627, 451.32703778379124, 45.786898599019665, 1217.7223315323395, 361.5531346019263, 43.1744599111901, 601.6399611756565, 1951.2601883248199, 95.77769046364271, 852.5971599606612, 338.5885863535487, 61.159492861548934, 1790.9957015980985, 1257.2345729646693, 68.72018475889989, 881.5710190485331, 318.81227611734306, 77.9329687169312, 388.78657168719633, 131.58911413107944, 37.520323907278474, 996.7157365294961, 851.9225930433847, 45.55666155865573, 1202.0751137240818, 1234.0998542575605, 22.556737590172343, 1174.5569653156235, 1306.848362808023, 90.57191210687083, 554.2038205298387, 1661.5005068189382, 29.906477071063275, 72.90347983036204, 171.90412305775627, 5.415349105333776, 862.4532851208033, 1053.6166741219997, 68.76866210528419, 1870.238667769686, 234.9112207722299, 63.33115236440714, 1424.830819973016, 252.1940738257098, 38.63572028514948, 207.8717142739137, 1207.698864014853, 46.6668528360523, 468.4462429218281, 1266.2087871235547, 17.204802800488935, 1449.013364604286, 817.4974501374654, 90.20300003171377, 1788.5213547084802, 1814.9503862360193, 62.231461303809034, 1131.328049486524, 1241.719337067739, 29.33555342442562, 94.00250042638203, 1763.2029343316672, 54.32267669501145, 836.9399424253678, 1251.0847888707603, 34.592253476033754, 256.6331356617293, 989.1275630923606, 44.10470336449361, 494.07155773128244, 1246.5784266922997, 71.21062791562599, 1617.7017987284405, 1647.3980677511188, 61.779558705262, 1722.8970288338191, 1633.2230779150557, 42.12843336086288, 1042.7055890762929, 1709.4149843170858, 30.052562525797413, 275.5952140317679, 1268.7924291124032, 2.871128191226971, 317.5591138088365, 1397.131747722792, 37.37315477642323, 732.5261367414904, 1091.8752481073618, 97.45702581018483, 810.9784259207194, 527.0721345583243, 59.32855738654687, 190.45937117814128, 198.45549176813182, 96.64506283068248, 446.97435874375225, 1142.7021210133928, 65.14464706047005, 1020.6139530816563, 871.3996211068846, 44.88567149511795, 501.387180567898, 1522.4504389603787, 49.116196491588134, 1132.4934820672017, 1251.5912942776224, 25.969860892829693, 1617.7478606947575, 306.2645326622058, 19.952249786064424, 139.09232115329863, 300.3401834844932, 63.158568912569734, 1172.3839469332204, 1497.687164497365, 43.90527730730595, 543.9519672599988, 1120.2523917608823, 71.455107581307, 611.2521179993706, 376.38722710250215, 70.25557737954898, 1052.3139631992, 442.194911727779, 9.058031291826891, 1944.3955381040694, 1380.5879267721848, 33.820874339751306, 1168.129709207011, 1944.1951252481506, 75.12663420746165, 1919.6534326037138, 1177.8095045184332, 87.64253766487262, 769.4367804583493, 1175.056497504998, 5.851854347828747, 1123.6675126745754, 994.8943279453958, 94.97658590023987, 1016.01467940564, 1431.078877191406, 34.98424600937149, 1908.2496233903234, 863.7273406424544, 27.98348672501264, 1018.2348239838839, 861.6093415012307, 47.2545438655664, 177.11721062446784, 1766.453911647195, 35.1924147777208, 1854.8019711113977, 1426.0903436855783, 9.73709746622848, 530.3634730495104, 537.1772245086299, 3.007098834381969, 128.5737701294012, 1720.6668433448979, 42.47544828126427, 1012.1376647719771, 1400.0051317676607, 31.76441516153517, 416.8402638719331, 213.8378797368923, 38.40440540383828, 807.3980231626763, 153.76707632591558, 80.12608476330723, 1514.3058282874272, 1083.0052493432197, 26.02552805580212, 1603.0910339789102, 715.9371662044518, 22.93656408938131, 1924.9991678266915, 1674.6012260719, 70.1162453509376, 1771.6510640228266, 1678.5620910919083, 64.24520473162985, 1790.5651430736818, 1977.1841092619682, 85.97602798067967, 913.8455805929182, 1130.433692756694, 4.3037578376150485, 1119.4776302931084, 1884.2247983190791, 18.656847946869668, 168.93951271092013, 1897.3186325479437, 42.04778066168329, 1735.6517980742526, 1607.115412015109, 13.609035454478569, 1436.9273467860096, 1775.4112190458782, 55.42328567828214, 1551.3864195042333, 456.4566707324358, 39.15550583305904, 738.167852027825, 1529.6965079903052, 78.86260488570616, 844.3974771778089, 523.7049700180622, 33.21007352153299, 991.4554601898142, 19.372299302378828, 55.21753650735033, 677.1263067201016, 701.2117462146437, 44.26702761343439, 326.64784438663605, 743.8816169857254, 69.07273611847334, 520.8885289974722, 880.6095957229741, 32.0222457840615, 195.7425372275492, 668.7313736583742, 67.14911524692448, 1043.0117032736753, 851.6599149846462, 69.4512641918018, 393.15758720642924, 538.0652858700943, 79.07070855123204, 1923.8455629446469, 1920.2032504530828, 70.24922138712105, 1756.939757773774, 440.3373019462609, 46.04291265829773, 1561.8885373083685, 1067.2399355237258, 4.354416658195284, 1580.5445152088428, 698.0581371381667, 60.5153417352413, 1351.9115408231585, 1336.8154874973006, 45.090911324123546, 1505.928056601741, 582.0731205753784, 45.556149787557914, 636.7080563669602, 1475.1118027089321, 57.031528882519744, 1665.8887896214255, 1721.5397447270304, 71.36642030000638, 181.3039381496615, 1775.6966905005518, 24.01679669161922, 1078.2653467983976, 1236.719066447153, 2.86700069570462, 1182.5268191336677, 142.53182480246872, 12.619587559620495, 163.7685603014507, 1984.3627174732467, 68.59706893010316, 1788.084617063424, 909.5342691527915, 77.7650735136342, 1574.2566558150656, 1890.370876265053, 97.75800922956458, 1355.626151451656, 1489.9460151543235, 20.07308435512054, 1788.778478889223, 1949.3927707602, 84.41383817241656, 812.7881139606, 114.91691032473295, 54.66889149327421, 1088.857712029374, 775.5598967486541, 21.946365347643564, 1335.7826963404798, 665.724647093326, 70.4672605290629, 1267.6775540609076, 1507.1993282165893, 93.86519689180689, 1205.595237436458, 1518.0474971204492, 51.389446246842496, 1670.7239681116978, 640.1521839130255, 29.337476369217327, 807.8756030839685, 1862.1323826427463, 93.5681561741427, 433.5513648137119, 1889.0694272216792, 41.63520432152511, 565.7252644152318, 1577.9298825759413, 55.16704064153906, 1314.3072111936388, 865.2028538309642, 15.135189950973205, 679.9635170701807, 857.8877150676276, 17.164149035534727, 354.47788336142594, 1406.9492287479657, 27.079589630344476, 674.0626368001415, 1659.4500862171772, 43.649476673687694, 1446.303943870453, 1190.1544399387835, 37.154879170696425, 687.468328764155, 1671.8881514918355, 33.671728541551815, 793.4821910569527, 126.19261118197534, 79.47538768446887, 1953.241511135566, 1760.342168831936, 22.924551259053352, 849.044334806864, 570.4726273095974, 48.85263690616369, 477.6157373657188, 1955.375366046232, 56.35593660319348, 1947.111669416585, 1779.0452281045937, 19.522330999635173, 1052.9424491842317, 869.570462756631, 67.01755734215565, 778.0824422857448, 85.89052086281224, 95.8390553407885, 885.6516942972088, 778.5927771528194, 33.543979346358896, 1752.3738311073168, 1394.237494558927, 41.82986390775028, 1247.3439620407762, 1077.8239282721206, 13.748362355169034, 1313.6670087582138, 494.8994000535567, 74.2236112778802, 558.7652352430961, 328.1055096755969, 6.160111884057871, 1735.2663474576436, 212.01231817418, 15.872097718098907, 1233.7659959620873, 765.1280416692454, 86.10128427835498, 948.8449910843373, 1262.5507138246376, 51.764452990940285, 768.3058294268887, 503.11944546287134, 7.532980044313476, 905.2565152045308, 750.7522148481797, 50.53110743314437, 1044.4548547459876, 200.2425920381823, 6.564775816890372, 1172.9953052673773, 1071.5912582800677, 42.85014412081969, 469.6982415228983, 872.93259305944, 3.951453837792754, 454.5999559771816, 886.3411335077016, 12.318421365666474, 678.5894362655855, 1008.6871003830676, 2.207316193503741, 1885.130798534978, 1973.2909985286774, 54.84191147150579, 1368.8963955069908, 205.05544203374916, 90.95113495033917, 340.2086484805205, 714.7152449132857, 43.73725889609677, 1699.4690965100872, 210.36164269548664, 50.14097592722956, 1145.3286095240337, 1691.6396115966647, 39.271022608249325, 1260.4505028608528, 539.7570777742104, 87.36829820957479, 838.5808234680285, 77.11032516741345, 39.703109814932525, 265.14893178054535, 1892.9401558272598, 20.104277068707948, 322.1893285265811, 520.7814169776661, 28.360316298468696, 891.276433267715, 1339.3214638263873, 21.805356002673754, 1948.6343536650409, 1658.3433282039348, 36.28045825505283, 1774.8705538621937, 1902.71243139465, 42.337594531223466, 1533.8216946592142, 1585.9966852214109, 25.581412183814976, 535.3428694312074, 1433.691273523499, 52.25446423205627, 1991.6867203359413, 973.543667130238, 23.023776162563063, 1684.373011740076, 690.7342421790241, 82.49753120384996, 140.9639619861427, 987.7509002978637, 65.12269856577724, 371.31712256916205, 1687.3552006740874, 21.989572570152895, 869.3497210480068, 1690.8189388904398, 5.057163545276035, 1802.7762952756864, 171.89390219424138, 67.89489822586147, 311.9086337387811, 1910.0763494290816, 83.56040286409755, 638.1218179678973, 1054.9084203303935, 56.08669341226843, 767.9927415271242, 1440.1448552939794, 83.56386034743375, 1821.6019329339722, 1964.7147077422362, 12.073691359773816, 208.59339087444883, 1353.114440722506, 33.604051308166795, 1788.3102334675284, 373.6660157747067, 54.13638180453456, 1049.227163483641, 1575.8268704590764, 60.273948574110044, 1271.4707375358123, 1828.9235478034084, 97.93421916402262, 1396.5865556102463, 1459.5242405500524, 56.721069862657174, 1213.8941007519322, 1271.2929636345439, 85.09270552185977'
    ues = list(re.split(r'[,\s]\s*', ue))
    ue = [float(i) for i in ues]
    sig1 = np.load('ue_outdoors_sig_for_bs1.npy')
    sig2 = np.load('ue_outdoors_sig_for_bs2.npy')
    sig3 = np.load('ue_outdoors_sig_for_bs3.npy')
    sig4 = np.load('ue_outdoors_sig_for_bs4.npy')
    sig5 = np.load('ue_outdoors_sig_for_bs5.npy')
    
    index = 0
    ratio1 = 0
    ratio2 = 0
    ratio10 = 0
    for i in range(500):
        ue_x = ue[index]
        index += 1
        ue_y = ue[index]
        index += 1
        ue_z = ue[index]
        index += 1
        x_est = 0.
        y_est = 0.
        z_est = 0.
        x_list = []
        y_list = []
        z_list = []
        for k in range(10):
            d1 = signal2distance(sig1[i][k], 1)
            d2 = signal2distance(sig2[i][k], 1)
            d3 = signal2distance(sig3[i][k], 1)
            d4 = signal2distance(sig4[i][k], 1)
            d5 = signal2distance(sig5[i][k], 1)
            dt21 = (d2 - d1) / light_speed
            dt31 = (d3 - d1) / light_speed
            dt41 = (d4 - d1) / light_speed
            dt51 = (d5 - d1) / light_speed
            position = tdoa_positioning_5bs_assist(bs1, bs2, bs3, bs4, bs5, dt21, dt31, dt41, dt51, 0, 0, 0, method='taylor-direct')
            # position = tdoa_positioning_4bs_improve(bs1, bs2, bs3, bs4, dt21, dt31, dt41, 0, 0, 0, method='taylor-direct')
            
            if (position.x <= 0) or (position.y <= 0) or (position.z <= 0) or (
                np.isnan(position.x)) or (np.isnan(position.y) or (np.isnan(position.z))):
                continue
            # print("    (%.6f %.6f %.6f)" % (position.x, position.y, position.z))
            x_list.append(position.x)
            y_list.append(position.y)
            z_list.append(position.z)

        x_est = find_most_average(x_list)
        y_est = find_most_average(y_list)
        z_est = find_most_average(z_list)

        # print('UE %d REF (%.6f %.6f %6f), Estimate (%.6f %.6f %.6f)' %(i, ue_x, ue_y, ue_z, x_est, y_est, z_est))
        if (abs(x_est - ue_x) < 1.0) and (abs(y_est - ue_y) < 1.0) and (abs(z_est - ue_z) < 1.0):
            ratio1 += 1
        # else:
        #     print('***UE %d REF (%.6f %.6f %6f), Estimate (%.6f %.6f %.6f)' %(i, ue_x, ue_y, ue_z, x_est, y_est, z_est))
        if (abs(x_est - ue_x) < 2.0) and (abs(y_est - ue_y) < 2.0) and (abs(z_est - ue_z) < 2.0):
            ratio2 += 1  
        if (abs(x_est - ue_x) < 10.0) and (abs(y_est - ue_y) < 10.0) and (abs(z_est - ue_z) < 10.0):
            ratio10 += 1
        else:
            print('***UE %d REF (%.6f %.6f %6f), Estimate (%.6f %.6f %.6f)' %(i, ue_x, ue_y, ue_z, x_est, y_est, z_est))
    print('ratio := %.4f %.4f %.4f' % (ratio1/500, ratio2/500, ratio10/500))
