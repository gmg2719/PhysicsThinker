//
// Generated file, do not edit! Created by nedtool 5.6 from message/airframe.msg.
//

#ifndef __AIRFRAME_M_H
#define __AIRFRAME_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0506
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



/**
 * Class generated from <tt>message/airframe.msg:3</tt> by nedtool.
 * <pre>
 * message AirFrameMsg
 * {
 *     int type;
 *     int source;
 *     int destination;
 * 	// Coordinates information
 *     double x;
 *     double y;
 *     double z;
 *     double destX;
 *     double destY;
 *     double destZ;
 *     double timeStamp;
 *     // all physical information
 *     double txPowerUpdate;
 *     double centerFreq;
 * }
 * </pre>
 */
class AirFrameMsg : public ::omnetpp::cMessage
{
  protected:
    int type;
    int source;
    int destination;
    double x;
    double y;
    double z;
    double destX;
    double destY;
    double destZ;
    double timeStamp;
    double txPowerUpdate;
    double centerFreq;

  private:
    void copy(const AirFrameMsg& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const AirFrameMsg&);

  public:
    AirFrameMsg(const char *name=nullptr, short kind=0);
    AirFrameMsg(const AirFrameMsg& other);
    virtual ~AirFrameMsg();
    AirFrameMsg& operator=(const AirFrameMsg& other);
    virtual AirFrameMsg *dup() const override {return new AirFrameMsg(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getType() const;
    virtual void setType(int type);
    virtual int getSource() const;
    virtual void setSource(int source);
    virtual int getDestination() const;
    virtual void setDestination(int destination);
    virtual double getX() const;
    virtual void setX(double x);
    virtual double getY() const;
    virtual void setY(double y);
    virtual double getZ() const;
    virtual void setZ(double z);
    virtual double getDestX() const;
    virtual void setDestX(double destX);
    virtual double getDestY() const;
    virtual void setDestY(double destY);
    virtual double getDestZ() const;
    virtual void setDestZ(double destZ);
    virtual double getTimeStamp() const;
    virtual void setTimeStamp(double timeStamp);
    virtual double getTxPowerUpdate() const;
    virtual void setTxPowerUpdate(double txPowerUpdate);
    virtual double getCenterFreq() const;
    virtual void setCenterFreq(double centerFreq);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const AirFrameMsg& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, AirFrameMsg& obj) {obj.parsimUnpack(b);}


#endif // ifndef __AIRFRAME_M_H

